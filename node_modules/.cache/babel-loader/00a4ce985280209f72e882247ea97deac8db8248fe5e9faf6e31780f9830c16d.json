{"ast":null,"code":"var _jsxFileName = \"/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/Tracklist.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Track from \"./Track\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Tracklist() {\n  _s();\n  const [tracklist, setTracklist] = useState([{\n    'songName': 'Something For Nothing',\n    'artist': 'Rush',\n    'album': '2112',\n    'id': '0',\n    /*Replace me with .utilities generate function when written*/\n    'playlist': false\n  }, {\n    'songName': 'Knights of Cydonia',\n    'artist': 'Muse',\n    'album': 'Black Holes and Revelations',\n    'id': '10',\n    'playlist': false\n  }]);\n  const [playlist, setPlaylist] = useState([]);\n  const addToPlaylist = track => {\n    console.log(track);\n    let playlistChecker = track.songName;\n    console.log(playlistChecker);\n    console.log(playlist.find(track => track.songName == playlistChecker));\n    if (playlist.find(track => track.songName == playlistChecker)) {\n      alert(track.songName + ' is already in playlist!');\n    } else {\n      alert('Starting new track for playlist');\n      let newId = track.id + 10;\n      const newTrack = {\n        songName: track.songName,\n        artist: track.artist,\n        album: track.album,\n        id: newId,\n        playlist: true\n      };\n      setPlaylist(playlist => [...playlist, newTrack]);\n    }\n  };\n  const removeFromPlaylist = trackToRemove => {\n    console.log('I am being sent here');\n    console.log(trackToRemove.id);\n    setPlaylist(playlist => playlist.filter(track => track.id !== trackToRemove.id));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tracklist.map(track => /*#__PURE__*/_jsxDEV(Track, {\n        track: track,\n        addToPlaylist: () => {\n          addToPlaylist(track);\n        },\n        removeFromPlaylist: () => {\n          removeFromPlaylist(track);\n        },\n        playlist: playlist\n      }, track.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: playlist.map(track => /*#__PURE__*/_jsxDEV(Track, {\n        track: track,\n        addToPlaylist: () => {\n          addToPlaylist(track);\n        },\n        removeFromPlaylist: () => {\n          removeFromPlaylist(track);\n        },\n        playlist: playlist\n      }, track.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Tracklist, \"kwkHb62nEAX4d3eeU8ySBOp+LRk=\");\n_c = Tracklist;\nexport default Tracklist;\nvar _c;\n$RefreshReg$(_c, \"Tracklist\");","map":{"version":3,"names":["React","useState","Track","jsxDEV","_jsxDEV","Fragment","_Fragment","Tracklist","_s","tracklist","setTracklist","playlist","setPlaylist","addToPlaylist","track","console","log","playlistChecker","songName","find","alert","newId","id","newTrack","artist","album","removeFromPlaylist","trackToRemove","filter","children","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/Tracklist.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport Track from \"./Track\";\n\nfunction Tracklist() {\n\n    const [tracklist, setTracklist] = useState([{\n        'songName' : 'Something For Nothing',\n        'artist' : 'Rush', \n        'album' : '2112',\n        'id' : '0', /*Replace me with .utilities generate function when written*/\n        'playlist' : false},\n        {\n        'songName' : 'Knights of Cydonia',\n        'artist' : 'Muse',\n        'album' : 'Black Holes and Revelations',\n        'id' : '10',\n        'playlist' : false}\n    ]);\n\n    const [playlist, setPlaylist] = useState([]);\n\n    const addToPlaylist = (track) => {\n        console.log(track);\n        let playlistChecker = track.songName;\n        console.log(playlistChecker)\n        console.log(playlist.find((track) => track.songName == playlistChecker))\n        if(playlist.find((track) => track.songName == playlistChecker)){\n            alert(track.songName + ' is already in playlist!')\n        }\n        else{\n            alert('Starting new track for playlist')\n            let newId = track.id+10;\n            const newTrack = {\n                songName: track.songName,\n                artist: track.artist,\n                album: track.album,\n                id: newId,\n                playlist: true\n            }\n            setPlaylist(playlist => [...playlist, newTrack])\n        }\n    }\n\n    const removeFromPlaylist = (trackToRemove) => {\n        console.log('I am being sent here')\n        console.log(trackToRemove.id)\n        setPlaylist((playlist) => \n            playlist.filter((track) => track.id !== trackToRemove.id))\n    }\n\n    return (\n        <>\n            <ul>\n                {tracklist.map((track) => (\n                    <Track \n                        key={track.id}\n                        track={track}\n                        addToPlaylist={() => {addToPlaylist(track)}}\n                        removeFromPlaylist={() => {removeFromPlaylist(track)}} \n                        playlist={playlist}\n\n                         />\n                )\n                )}\n            </ul>\n            <ul>\n                {playlist.map((track) => (\n                    <Track\n                        key={track.id}\n                        track={track}\n                        addToPlaylist={() => {addToPlaylist(track)}}\n                        removeFromPlaylist={() => {removeFromPlaylist(track)}} \n                        playlist={playlist}\n                        />\n                )\n                )}\n            </ul>\n        </>\n\n    )\n}\n\nexport default Tracklist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}