{"ast":null,"code":"var _jsxFileName = \"/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/SearchResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Tracklist from './Tracklist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SearchResults(props) {\n  _s();\n  const [searchResults, setSearchResults] = useState([{\n    'songName': 'Something For Nothing',\n    'artist': 'Rush',\n    'album': '2112',\n    'id': '0',\n    /*Replace me with .utilities generate function when written*/\n    'playlist': false\n  }, {\n    'songName': 'Knights of Cydonia',\n    'artist': 'Muse',\n    'album': 'Black Holes and Revelations',\n    'id': '10',\n    /*Replace me with .utilities generate function when written*/\n    'playlist': false\n  }, {\n    'songName': 'Lovers Leap',\n    'artist': 'Elbow',\n    'album': 'Lovers Leap',\n    'id': '20',\n    'playlist': false\n  }]);\n  const addToPlaylist = track => {\n    let playlistChecker = track.songName;\n    playlist.find(track => track.songName === playlistChecker);\n    if (playlist.find(track => track.songName === playlistChecker)) {\n      alert(track.songName + ' is already in playlist!');\n    } else {\n      let newId = track.id + 10; /*Replace me with .utilities generate function when written*/\n      const newTrack = {\n        songName: track.songName,\n        artist: track.artist,\n        album: track.album,\n        id: newId,\n        playlist: true\n      };\n      setPlaylist(playlist => [...playlist, newTrack]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Tracklist, {\n      searchResults: searchResults,\n      addToPlaylist: addToPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(SearchResults, \"pAzgjC6b8VzLX1rVpe/W6Z8msY8=\");\n_c = SearchResults;\nexport default SearchResults;\nvar _c;\n$RefreshReg$(_c, \"SearchResults\");","map":{"version":3,"names":["React","useState","Tracklist","jsxDEV","_jsxDEV","Fragment","_Fragment","SearchResults","props","_s","searchResults","setSearchResults","addToPlaylist","track","playlistChecker","songName","playlist","find","alert","newId","id","newTrack","artist","album","setPlaylist","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/SearchResults.js"],"sourcesContent":["import React, {useState} from 'react'\nimport Tracklist from './Tracklist';\n\nfunction SearchResults(props) {\n    const [searchResults, setSearchResults] = useState([\n        {\n        'songName' : 'Something For Nothing',\n        'artist' : 'Rush', \n        'album' : '2112',\n        'id' : '0', /*Replace me with .utilities generate function when written*/\n        'playlist' : false},\n        {\n        'songName' : 'Knights of Cydonia',\n        'artist' : 'Muse',\n        'album' : 'Black Holes and Revelations',\n        'id' : '10', /*Replace me with .utilities generate function when written*/\n        'playlist' : false},\n        {\n        'songName' : 'Lovers Leap',\n        'artist' : 'Elbow',\n        'album' : 'Lovers Leap',\n        'id' : '20',\n        'playlist' : false}\n    ])\n    const addToPlaylist = (track) => {\n        let playlistChecker = track.songName;\n        playlist.find((track) => track.songName === playlistChecker)\n        if(playlist.find((track) => track.songName === playlistChecker)){\n            alert(track.songName + ' is already in playlist!')\n        }\n        else{\n            let newId = track.id+10; /*Replace me with .utilities generate function when written*/\n            const newTrack = {\n                songName: track.songName,\n                artist: track.artist,\n                album: track.album,\n                id: newId,\n                playlist: true\n            }\n            setPlaylist(playlist => [...playlist, newTrack])\n        }\n    }\n\n    return (\n        <>\n            <Tracklist \n                searchResults={searchResults}\n                addToPlaylist={addToPlaylist}\n            />\n        </>\n    )\n}\n\nexport default SearchResults;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpC,SAASC,aAAaA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC1B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,CAC/C;IACA,UAAU,EAAG,uBAAuB;IACpC,QAAQ,EAAG,MAAM;IACjB,OAAO,EAAG,MAAM;IAChB,IAAI,EAAG,GAAG;IAAE;IACZ,UAAU,EAAG;EAAK,CAAC,EACnB;IACA,UAAU,EAAG,oBAAoB;IACjC,QAAQ,EAAG,MAAM;IACjB,OAAO,EAAG,6BAA6B;IACvC,IAAI,EAAG,IAAI;IAAE;IACb,UAAU,EAAG;EAAK,CAAC,EACnB;IACA,UAAU,EAAG,aAAa;IAC1B,QAAQ,EAAG,OAAO;IAClB,OAAO,EAAG,aAAa;IACvB,IAAI,EAAG,IAAI;IACX,UAAU,EAAG;EAAK,CAAC,CACtB,CAAC;EACF,MAAMW,aAAa,GAAIC,KAAK,IAAK;IAC7B,IAAIC,eAAe,GAAGD,KAAK,CAACE,QAAQ;IACpCC,QAAQ,CAACC,IAAI,CAAEJ,KAAK,IAAKA,KAAK,CAACE,QAAQ,KAAKD,eAAe,CAAC;IAC5D,IAAGE,QAAQ,CAACC,IAAI,CAAEJ,KAAK,IAAKA,KAAK,CAACE,QAAQ,KAAKD,eAAe,CAAC,EAAC;MAC5DI,KAAK,CAACL,KAAK,CAACE,QAAQ,GAAG,0BAA0B,CAAC;IACtD,CAAC,MACG;MACA,IAAII,KAAK,GAAGN,KAAK,CAACO,EAAE,GAAC,EAAE,CAAC,CAAC;MACzB,MAAMC,QAAQ,GAAG;QACbN,QAAQ,EAAEF,KAAK,CAACE,QAAQ;QACxBO,MAAM,EAAET,KAAK,CAACS,MAAM;QACpBC,KAAK,EAAEV,KAAK,CAACU,KAAK;QAClBH,EAAE,EAAED,KAAK;QACTH,QAAQ,EAAE;MACd,CAAC;MACDQ,WAAW,CAACR,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAEK,QAAQ,CAAC,CAAC;IACpD;EACJ,CAAC;EAED,oBACIjB,OAAA,CAAAE,SAAA;IAAAmB,QAAA,eACIrB,OAAA,CAACF,SAAS;MACNQ,aAAa,EAAEA,aAAc;MAC7BE,aAAa,EAAEA;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC;EAAC,gBACJ,CAAC;AAEX;AAACpB,EAAA,CAhDQF,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AAkDtB,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}