{"ast":null,"code":"var _jsxFileName = \"/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport Track from \"./Track\";\nimport './Playlist.css';\n//import { json } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Playlist(props) {\n  _s();\n  const {\n    playlist,\n    removeFromPlaylist,\n    token\n  } = props;\n  const [playlistName, setPlayListName] = useState('');\n  const [playlists, setPlaylists] = useState([]);\n  const uriArray = [];\n  let playlistId = 'hello';\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (playlistName === '') {\n      alert('Must have a playlist name!');\n    } else if (playlist.length === 0) {\n      alert('No tracks in playlist');\n    } else if (!token) {\n      alert('You need to be logged in to upload playlists to Spotify');\n    } else {\n      //get user id\n\n      const responseUserId = await axios.get('https://api.spotify.com/v1/me', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const USER_ID = responseUserId.data.id;\n\n      //Upload playlist to Spotify\n      /*await axios({\n          method: 'post',\n          url: `https://api.spotify.com/v1/users/${USER_ID}/playlists`,\n          headers: {'Authorization': `Bearer ${token}`},\n          data: {\n              'name': `${playlistName}`,\n              'description': 'Playlist created with JAMMMING app',\n              'public': false\n          }\n      })\n      .then(async function (response) {\n          playlistId = response.data.id;\n          console.log(playlistId)\n      })\n      .catch(function (error) {\n          console.log(error);\n          alert(error)\n      });*/\n\n      const uploadPlaylist = async () => {\n        try {\n          const response = await axios.post(`https://api.spotify.com/v1/users/${USER_ID}/playlists`, {\n            'name': `${playlistName}`,\n            'description': 'Playlist created with JAMMMING app',\n            'public': false\n          }, {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          console.log(response);\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      uploadPlaylist();\n\n      //Get track uris\n      console.log(playlistId);\n      const trackPostUrl = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\n      console.log(trackPostUrl);\n      for (let i = 0; i < playlist.length; i++) {\n        uriArray.push(playlist[i].uri);\n      }\n      //Post uris to playlist\n      await axios({\n        method: \"post\",\n        url: `${trackPostUrl}`,\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": 'application/json'\n        },\n        data: {\n          \"uris\": uriArray,\n          \"postition\": 0\n        }\n      }).then(function (response) {\n        console.log(response);\n        //reset\n        alert(`Upload ${playlistName} successful`);\n        setPlaylists(playlists => [...playlists, playlistName]);\n        setPlayListName('');\n        playlist.splice(0);\n      }).catch(function (error) {\n        if (error.response) {\n          console.log(error.response.config.data);\n        } else if (error.request) {\n          console.log(error.request);\n        } else if (error.message) {\n          console.log(error.message);\n        } else {\n          console.log('Good luck');\n        }\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"heading\",\n        onChange: e => setPlayListName(e.target.value),\n        value: playlistName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: playlist === null || playlist === void 0 ? void 0 : playlist.map(track => /*#__PURE__*/_jsxDEV(Track, {\n          trackIsInPlaylist: true,\n          track: track,\n          removeFromPlaylist: () => {\n            removeFromPlaylist(track);\n          }\n        }, track.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"heading\",\n        type: \"submit\",\n        children: \"Upload My Jammms!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"heading\",\n      children: \"Saved Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: playlists === null || playlists === void 0 ? void 0 : playlists.map(pl => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: pl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Playlist, \"wnBSdSZ6qdQWzI4gW4KiufbuhN0=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","axios","Track","jsxDEV","_jsxDEV","Fragment","_Fragment","Playlist","props","_s","playlist","removeFromPlaylist","token","playlistName","setPlayListName","playlists","setPlaylists","uriArray","playlistId","handleSubmit","e","preventDefault","alert","length","responseUserId","get","headers","Authorization","USER_ID","data","id","uploadPlaylist","response","post","console","log","error","trackPostUrl","i","push","uri","method","url","then","splice","catch","config","request","message","children","onSubmit","className","onChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","map","track","trackIsInPlaylist","type","pl","_c","$RefreshReg$"],"sources":["/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/Playlist.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport axios from \"axios\";\nimport Track from \"./Track\";\nimport './Playlist.css'\n//import { json } from \"react-router-dom\";\n\nfunction Playlist(props) {\n    const {playlist, removeFromPlaylist, token} = props;\n\n    const [playlistName, setPlayListName] = useState('')\n    const [playlists, setPlaylists] = useState([])\n    const uriArray = [];\n    let playlistId = 'hello'\n\n    \n    \n    async function handleSubmit(e) {\n        e.preventDefault();\n        if(playlistName === ''){\n            alert('Must have a playlist name!')\n        }\n        else if(playlist.length === 0){\n            alert('No tracks in playlist')\n        }\n        else if(!token){\n            alert('You need to be logged in to upload playlists to Spotify')\n        }\n        else{\n            //get user id\n\n            const responseUserId = await axios.get ('https://api.spotify.com/v1/me', {\n                headers: {\n                    Authorization: `Bearer ${token}`\n                }\n            });\n            const USER_ID = responseUserId.data.id;\n\n            //Upload playlist to Spotify\n            /*await axios({\n                method: 'post',\n                url: `https://api.spotify.com/v1/users/${USER_ID}/playlists`,\n                headers: {'Authorization': `Bearer ${token}`},\n                data: {\n                    'name': `${playlistName}`,\n                    'description': 'Playlist created with JAMMMING app',\n                    'public': false\n                }\n            })\n            .then(async function (response) {\n                playlistId = response.data.id;\n                console.log(playlistId)\n            })\n            .catch(function (error) {\n                console.log(error);\n                alert(error)\n            });*/\n\n            const uploadPlaylist = async () => {\n                try {\n                    const response = await axios.post(`https://api.spotify.com/v1/users/${USER_ID}/playlists`,\n                        {\n                            'name': `${playlistName}`,\n                            'description': 'Playlist created with JAMMMING app',\n                            'public': false\n                        },\n                        {headers: {'Authorization': `Bearer ${token}`}}\n                    );\n                    console.log(response);\n                }\n                catch(error){\n                    console.log(error);\n                }\n            }\n            \n            uploadPlaylist();\n\n            //Get track uris\n            console.log(playlistId)\n            const trackPostUrl = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`\n            console.log(trackPostUrl)\n            for (let i = 0; i < playlist.length; i++){\n                uriArray.push(playlist[i].uri)\n            }\n            //Post uris to playlist\n            await axios({\n                method: \"post\",\n                url: `${trackPostUrl}`,\n                headers: {\"Authorization\": `Bearer ${token}`, \"Content-Type\": 'application/json'},\n                data: {\n                    \"uris\": uriArray, \"postition\": 0\n                }\n            })\n            .then(function (response) {\n                console.log(response)  \n                //reset\n                alert(`Upload ${playlistName} successful`)\n                setPlaylists(playlists => [...playlists, playlistName])\n                setPlayListName('')\n                playlist.splice(0)\n            })\n            .catch(function (error) {\n                if(error.response){\n                    console.log(error.response.config.data)\n                }\n                else if(error.request){\n                    console.log(error.request)\n                }\n                else if(error.message){\n                    console.log(error.message)\n                }\n                else{\n                    console.log('Good luck')\n                }\n            })\n        }\n    }\n\n    return(\n        <>\n            <form onSubmit={handleSubmit}>\n                <input \n                    className='heading'\n                    onChange={(e) => setPlayListName(e.target.value)}\n                    value={playlistName}\n                />\n                <ul>\n                    {playlist?.map((track) => (\n                        <Track\n                            trackIsInPlaylist = {true}\n                            key={track.id}\n                            track={track}\n                            removeFromPlaylist={() => {removeFromPlaylist(track)}} \n                        />\n                    ))}\n                </ul>\n                <button className='heading' type=\"submit\">\n                    Upload My Jammms!\n                </button>\n            </form>\n            {/*add functionality to be able to change playlist names*/}\n            <h3 className='heading'>Saved Playlists</h3>\n            <ul>\n                {playlists?.map((pl) => (\n                    <li>\n                        {pl}\n                    </li>\n                ))}\n            </ul>\n            \n        </>\n    )\n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}