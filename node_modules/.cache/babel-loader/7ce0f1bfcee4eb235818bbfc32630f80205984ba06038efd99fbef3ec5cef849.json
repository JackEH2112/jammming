{"ast":null,"code":"var _jsxFileName = \"/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Track from \"./Track\";\nimport './Playlist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Playlist(props) {\n  _s();\n  const {\n    playlist,\n    removeFromPlaylist,\n    token\n  } = props;\n  const [playlistName, setPlayListName] = useState('');\n  const [playlists, setPlaylists] = useState([]);\n  const newUriPlaylist = [];\n  async function handleSubmit(e) {\n    e.preventDefault();\n    if (playlistName === '') {\n      alert('Must have a playlist name!');\n    } else if (playlist.length === 0) {\n      alert('No tracks in playlist');\n    } else if (!token) {\n      alert('You need to be logged in to upload playlists to Spotify');\n    } else {\n      //get user id\n      const USER_ID = await fetch('https://api.spotify.com/v1/me');\n\n      //Upload playlist name to Spotify\n      setPlaylists(playlists => [...playlists, playlistName]);\n      for (let i = 0; i < playlist.length; i++) {\n        //Get track URI\n        console.log(playlist[i].uri);\n        const playlistUri = playlist[i].uri;\n        //add URI code to array to post to Spotify api\n        newUriPlaylist.push(playlistUri);\n      }\n      //POST tracks to playlist\n      console.log(newUriPlaylist);\n      alert(`Upload ${playlistName} successful`);\n      setPlayListName('');\n      playlist.splice(0);\n      newUriPlaylist.splice(0);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"heading\",\n        onChange: e => setPlayListName(e.target.value),\n        value: playlistName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: playlist === null || playlist === void 0 ? void 0 : playlist.map(track => /*#__PURE__*/_jsxDEV(Track, {\n          trackIsInPlaylist: true,\n          track: track,\n          removeFromPlaylist: () => {\n            removeFromPlaylist(track);\n          }\n        }, track.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"heading\",\n        type: \"submit\",\n        children: \"Upload My Jammms!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      class: \"heading\",\n      children: \"Saved Playlists\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: playlists === null || playlists === void 0 ? void 0 : playlists.map(pl => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: pl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Playlist, \"wnBSdSZ6qdQWzI4gW4KiufbuhN0=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useState","Track","jsxDEV","_jsxDEV","Fragment","_Fragment","Playlist","props","_s","playlist","removeFromPlaylist","token","playlistName","setPlayListName","playlists","setPlaylists","newUriPlaylist","handleSubmit","e","preventDefault","alert","length","USER_ID","fetch","i","console","log","uri","playlistUri","push","splice","children","onSubmit","class","onChange","target","value","fileName","_jsxFileName","lineNumber","columnNumber","map","track","trackIsInPlaylist","id","type","pl","_c","$RefreshReg$"],"sources":["/Users/jackhughes/JackEH2112.github.io/CCProjects/jammming/src/Playlist.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport Track from \"./Track\";\nimport './Playlist.css'\n\nfunction Playlist(props) {\n    const {playlist, removeFromPlaylist, token} = props;\n\n    const [playlistName, setPlayListName] = useState('')\n    const [playlists, setPlaylists] = useState([])\n    const newUriPlaylist = [];\n    \n    async function handleSubmit(e) {\n        e.preventDefault();\n        if(playlistName === ''){\n            alert('Must have a playlist name!')\n        }\n        else if(playlist.length === 0){\n            alert('No tracks in playlist')\n        }\n        else if(!token){\n            alert('You need to be logged in to upload playlists to Spotify')\n        }\n        else{\n            //get user id\n            const USER_ID = await fetch ('https://api.spotify.com/v1/me') ;\n            \n            //Upload playlist name to Spotify\n            setPlaylists(playlists => [...playlists, playlistName])\n\n            for (let i = 0; i < playlist.length; i++){\n                //Get track URI\n                console.log(playlist[i].uri)\n                const playlistUri = playlist[i].uri;\n                //add URI code to array to post to Spotify api\n                newUriPlaylist.push(playlistUri)\n            }\n            //POST tracks to playlist\n            console.log(newUriPlaylist)\n\n            alert(`Upload ${playlistName} successful`)\n            setPlayListName('')\n            playlist.splice(0)\n            newUriPlaylist.splice(0)\n        }\n    }\n\n    return(\n        <>\n            <form onSubmit={handleSubmit}>\n                <input \n                    class='heading'\n                    onChange={(e) => setPlayListName(e.target.value)}\n                    value={playlistName}\n                />\n                <ul>\n                    {playlist?.map((track) => (\n                        <Track\n                            trackIsInPlaylist = {true}\n                            key={track.id}\n                            track={track}\n                            removeFromPlaylist={() => {removeFromPlaylist(track)}} \n                        />\n                    ))}\n                </ul>\n                <button class='heading' type=\"submit\">\n                    Upload My Jammms!\n                </button>\n            </form>\n            {/*add functionality to be able to change playlist names*/}\n            <h3 class='heading'>Saved Playlists</h3>\n            <ul>\n                {playlists?.map((pl) => (\n                    <li>\n                        {pl}\n                    </li>\n                ))}\n            </ul>\n            \n        </>\n    )\n}\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}